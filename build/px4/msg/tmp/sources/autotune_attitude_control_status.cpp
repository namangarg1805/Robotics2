/****************************************************************************
 *
 *   Copyright (C) 2013-2021 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file /home/naman/catkin_ws/src/PX4-Autopilot/msg/autotune_attitude_control_status.msg */


#include <inttypes.h>
#include <px4_platform_common/log.h>
#include <px4_platform_common/defines.h>
#include <uORB/topics/autotune_attitude_control_status.h>
#include <uORB/topics/uORBTopics.hpp>
#include <drivers/drv_hrt.h>
#include <lib/drivers/device/Device.hpp>
#include <lib/matrix/matrix/math.hpp>
#include <lib/mathlib/mathlib.h>

constexpr char __orb_autotune_attitude_control_status_fields[] = "uint64_t timestamp;float[5] coeff;float[5] coeff_var;float fitness;float innov;float dt_model;float kc;float ki;float kd;float kff;float att_p;float[3] rate_sp;float u_filt;float y_filt;uint8_t state;uint8_t[3] _padding0;";

ORB_DEFINE(autotune_attitude_control_status, struct autotune_attitude_control_status_s, 101, __orb_autotune_attitude_control_status_fields, static_cast<uint8_t>(ORB_ID::autotune_attitude_control_status));


void print_message(const autotune_attitude_control_status_s &message)
{

	PX4_INFO_RAW(" autotune_attitude_control_status_s\n");

	const hrt_abstime now = hrt_absolute_time();

	if (message.timestamp != 0) {
		PX4_INFO_RAW("\ttimestamp: %" PRIu64 "  (%.6f seconds ago)\n", message.timestamp, (now - message.timestamp) / 1e6);
	} else {
		PX4_INFO_RAW("\n");
	}
	PX4_INFO_RAW("\tcoeff: [%.4f, %.4f, %.4f, %.4f, %.4f]\n", (double)message.coeff[0], (double)message.coeff[1], (double)message.coeff[2], (double)message.coeff[3], (double)message.coeff[4]);
	PX4_INFO_RAW("\tcoeff_var: [%.4f, %.4f, %.4f, %.4f, %.4f]\n", (double)message.coeff_var[0], (double)message.coeff_var[1], (double)message.coeff_var[2], (double)message.coeff_var[3], (double)message.coeff_var[4]);
	PX4_INFO_RAW("\tfitness: %.4f\n", (double)message.fitness);
	PX4_INFO_RAW("\tinnov: %.4f\n", (double)message.innov);
	PX4_INFO_RAW("\tdt_model: %.4f\n", (double)message.dt_model);
	PX4_INFO_RAW("\tkc: %.4f\n", (double)message.kc);
	PX4_INFO_RAW("\tki: %.4f\n", (double)message.ki);
	PX4_INFO_RAW("\tkd: %.4f\n", (double)message.kd);
	PX4_INFO_RAW("\tkff: %.4f\n", (double)message.kff);
	PX4_INFO_RAW("\tatt_p: %.4f\n", (double)message.att_p);
	PX4_INFO_RAW("\trate_sp: [%.4f, %.4f, %.4f]\n", (double)message.rate_sp[0], (double)message.rate_sp[1], (double)message.rate_sp[2]);
	PX4_INFO_RAW("\tu_filt: %.4f\n", (double)message.u_filt);
	PX4_INFO_RAW("\ty_filt: %.4f\n", (double)message.y_filt);
	PX4_INFO_RAW("\tstate: %u\n", message.state);
	
}
